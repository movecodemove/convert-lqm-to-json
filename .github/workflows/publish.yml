name: Publish

on:
  pull_request:
    branches:
      - main
    types:
      - closed

defaults:
  run:
    shell: bash

jobs:
  publish:
    name: Tag Release
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get cache key and paths values
        id: cache-values
        uses: ./.github/actions/cache-values
        with:
          hash: ${{ hashFiles('poetry.lock') }}

      - uses: actions/cache@v2
        id: cache
        with:
          key: {{ steps.cache-values.outputs.key }}
          path: {{ steps.cache-values.outputs.paths }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        uses: ./.github/actions/dependencies

      - name: Bump version number
        run: |
          CURRENT_VERSION=`python -m poetry version -s`
          python -m poetry version patch -q
          NEW_VERSION=`python -m poetry version -s`
          sed -i "s/$CURRENT_VERSION/$NEW_VERSION/g" convert_lqm_to_json/__init__.py
          sed -i "s/$CURRENT_VERSION/$NEW_VERSION/g" tests/test___init__.py

      - name: Ensure tests pass after version bump
        run: poetry run pytest tests

      - name: Create and tag commit and push both to Github
        run: |
          git config --global user.name "Github Action Bot"
          git config --global user.email "<>"
          VERSION=`python -m poetry version -s`
          git commit -am "Release $VERSION"
          git tag -a "v$VERSION" -m "Version $VERSION"
          git push --follow-tags

      - name: Publish release
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --build
